import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';

@Injectable()
export class LlmService {
  private readonly logger = new Logger(LlmService.name);
  private readonly apiUrl = 'https://api.openai.com/v1/chat/completions';
  private readonly apiKey = process.env.OPENAI_API_KEY;

  async generateWish(): Promise<string> {
    try {
      if (!this.apiKey) {
        this.logger.warn(
          'OPENAI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è',
        );
        return this.getDefaultWish();
      }

      const response = await axios.post(
        this.apiUrl,
        {
          model: 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content:
                '–¢–∏ –¥–æ–ø–æ–º–∞–≥–∞—î—à –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫—ñ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è –∑–∞–Ω—è—Ç—å. –ü–æ–±–∞–∂–∞–Ω–Ω—è –º–∞—é—Ç—å –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º–∏, –∫–æ—Ä–æ—Ç–∫–∏–º–∏ (–¥–æ 10 —Å–ª—ñ–≤) —Ç–∞ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –µ–º–æ–¥–∑—ñ.',
            },
            {
              role: 'user',
              content:
                '–ó–≥–µ–Ω–µ—Ä—É–π –∫–æ—Ä–æ—Ç–∫–µ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è –∑–∞–Ω—è—Ç—Ç—è. –ü–æ–±–∞–∂–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —Ç–∞ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –µ–º–æ–¥–∑—ñ.',
            },
          ],
          max_tokens: 50,
          temperature: 0.8,
        },
        {
          headers: {
            Authorization: `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
          },
          timeout: 15000,
        },
      );

      if (
        response.data &&
        response.data.choices &&
        response.data.choices[0] &&
        response.data.choices[0].message &&
        response.data.choices[0].message.content
      ) {
        const generatedText = response.data.choices[0].message.content.trim();
        return generatedText || this.getDefaultWish();
      }

      return this.getDefaultWish();
    } catch (error) {
      this.logger.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–±–∞–∂–∞–Ω–Ω—è:', error.message);
      return this.getDefaultWish();
    }
  }

  private getDefaultWish(): string {
    const defaultWishes = [
      '–ë–∞–∂–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è! üöÄ',
      '–ù–µ—Ö–∞–π —Ü–µ –∑–∞–Ω—è—Ç—Ç—è –±—É–¥–µ –∫–æ—Ä–∏—Å–Ω–∏–º! üí™',
      '–ì–æ—Ç–æ–≤–∏–π –¥–æ –Ω–æ–≤–∏—Ö –∑–Ω–∞–Ω—å! üìö',
      '–£—Å–ø—ñ—Ö—ñ–≤ —É –Ω–∞–≤—á–∞–Ω–Ω—ñ! ‚≠ê',
      '–ü—Ä–∏—î–º–Ω–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è! üåü',
      '–ë–∞–∂–∞—é —Ü—ñ–∫–∞–≤–æ–≥–æ —É—Ä–æ–∫—É! üéØ',
      '–ù–µ—Ö–∞–π –≤—Å–µ –≤–∏–π–¥–µ —á—É–¥–æ–≤–æ! ‚ú®',
      '–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏! üî•',
    ];

    return defaultWishes[Math.floor(Math.random() * defaultWishes.length)];
  }
}
