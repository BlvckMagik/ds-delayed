import { Injectable, Logger } from '@nestjs/common'
import { Cron, CronExpression } from '@nestjs/schedule'
import { InjectRepository } from '@nestjs/typeorm'
import { Repository } from 'typeorm'
const TelegramBot = require('node-telegram-bot-api')
import { format, formatInTimeZone } from 'date-fns-tz'
import { uk } from 'date-fns/locale'
import { Lesson } from '../lessons/entities/lesson.entity'
import { Group } from '../groups/entities/group.entity'

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name)
  private bot: any = null
  private readonly botToken = process.env.TELEGRAM_BOT_TOKEN

  constructor(
    @InjectRepository(Lesson)
    private lessonsRepository: Repository<Lesson>,
    @InjectRepository(Group)
    private groupsRepository: Repository<Group>,
  ) {
    if (!this.botToken) {
      this.logger.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π')
    } else {
      this.bot = new TelegramBot(this.botToken, { polling: false })
      this.logger.log('Telegram –±–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ')
    }
  }

  @Cron(CronExpression.EVERY_MINUTE)
  async handleScheduledLessons() {
    if (!this.bot) {
      this.logger.error('–ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ')
      return
    }

    const now = new Date()
    const currentTime = format(now, 'HH:mm')
    const currentDayOfWeek = now.getDay()

    const lessons = await this.lessonsRepository.find({
      where: {
        dayOfWeek: currentDayOfWeek,
        time: currentTime,
      },
      relations: ['group'],
    })

    for (const lesson of lessons) {
      if (lesson.group) {
        await this.sendLessonReminder(lesson)
      }
    }
  }

  private async sendLessonReminder(lesson: Lesson) {
    if (!this.bot) return

    try {
      const message = this.createLessonMessage(lesson)
      
      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –≥—Ä—É–ø–∏
      await this.bot.sendMessage(lesson.group.chatId, message, { parse_mode: 'HTML' })
      this.logger.log(`Sent reminder for lesson: ${lesson.name} to chat: ${lesson.group.chatId}`)
    } catch (error) {
      this.logger.error(`Failed to send reminder for lesson: ${lesson.name}`, error)
    }
  }

  private createLessonMessage(lesson: Lesson): string {
    const now = new Date()
    const kievTime = formatInTimeZone(now, 'Europe/Kiev', 'HH:mm', { locale: uk })
    const berlinTime = formatInTimeZone(now, 'Europe/Berlin', 'HH:mm', { locale: uk })
    
    const dayNames = ['–ù–µ–¥—ñ–ª—è', '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü\'—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞']
    const dayName = dayNames[lesson.dayOfWeek]
    
    return `
üîî <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–Ω—è—Ç—Ç—è</b>

üìö <b>${lesson.name}</b>

üìÖ <b>–î–µ–Ω—å:</b> ${dayName}
‚è∞ <b>–ß–∞—Å:</b> ${lesson.time}
üá∫üá¶ –ö–∏—ó–≤: ${kievTime}
üá©üá™ –ë–µ—Ä–ª—ñ–Ω: ${berlinTime}

üîó <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Meet:</b> ${lesson.group.meetLink}

–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –∑–∞–Ω—è—Ç—Ç—è!
    `.trim()
  }
} 